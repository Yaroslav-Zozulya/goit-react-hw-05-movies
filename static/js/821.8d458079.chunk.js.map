{"version":3,"file":"static/js/821.8d458079.chunk.js","mappings":"wRAwCA,EArCmB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACpB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAeA,OACE,0BACE,kBAAMH,SAXW,SAAAI,GACnBA,EAAMC,iBACmB,KAArBH,EAAUI,QACZC,MAAM,wBAERP,EAASE,GACTC,EAAa,KAKX,WACE,kBACEK,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,YAAY,8BACZC,MAAOX,EACPY,SAvBa,SAAAV,GACnBD,EAAaC,EAAMW,cAAcF,MAAMG,mBAwBnC,mBAAQR,KAAK,SAAb,0BC+BR,EAxDmB,WACjB,OAA4BP,EAAAA,EAAAA,UAAS,IAArC,eAAOgB,EAAP,KAAeC,EAAf,KACA,GAA8BjB,EAAAA,EAAAA,WAAS,GAAvC,eAAOkB,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAcJ,EAAaK,IAAI,SALd,SAORC,EAPQ,0EAOvB,WAA2B1B,GAA3B,0EACOA,EADP,wDAIEkB,GAAW,GAJb,mBAMyBS,EAAAA,EAAAA,IAAiB3B,GAN1C,UAO0B,KADhBe,EANV,QAOea,OAPf,wBAQMvB,MAAM,mBARZ,2BAWIW,EAAUD,GAXd,kDAaIc,QAAQC,IAAR,MAbJ,yBAeIZ,GAAW,GAff,8EAPuB,sBAqCvB,OANAa,EAAAA,EAAAA,YAAU,WACJP,GACFE,EAAYF,KAEb,CAACA,KAGF,4BACE,SAAC,EAAD,CAAY1B,SAbS,SAAAE,GACvBqB,EAAgB,CAAEW,MAAOhC,IACzB0B,EAAY1B,MAYTiB,IAAW,SAACgB,EAAA,EAAD,IACXlB,IACC,wBACGA,EAAOmB,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMjB,GAAhD,SACGa,EAAMK,SAFFL,EAAME,c,0MChDrBI,EAAM,mCACZC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,sGACRD,IAAAA,IAAA,oCAAuCD,IAD/B,cACzBG,EADyB,gBAEFA,EAASC,KAAKC,QAFZ,cAEzBC,EAFyB,yBAGxBA,GAHwB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMX,GAAN,yFACNK,IAAAA,IAAA,iBACXL,EADW,oBACGI,EADH,oBADM,cACvBG,EADuB,gBAKFA,EAASC,KALP,cAKvBI,EALuB,yBAMtBA,GANsB,2CAAH,sDASfC,EAAe,mCAAG,WAAMC,GAAN,yFACNT,IAAAA,IAAA,iBACXS,EADW,4BACgBV,EADhB,oBADM,cACvBG,EADuB,gBAIFA,EAASC,KAJP,cAIvBO,EAJuB,yBAKtBA,GALsB,2CAAH,sDAQfC,EAAe,mCAAG,WAAMF,GAAN,yFACNT,IAAAA,IAAA,iBAAoBS,EAApB,4BAA+CV,IADzC,cACvBG,EADuB,gBAEFA,EAASC,KAFP,cAEvBS,EAFuB,yBAGtBA,GAHsB,2CAAH,sDAMf3B,EAAgB,mCAAG,WAAO3B,EAAWuD,GAAlB,yFACPb,IAAAA,IAAA,+BACGD,EADH,iBACec,EADf,8BACyCvD,IAFlC,cACxB4C,EADwB,gBAICA,EAASC,KAAKC,QAJf,cAIxBU,EAJwB,yBAKvBA,GALuB,2CAAH","sources":["components/SearchForm/SearchForm.jsx","components/MovieSearch/MovieSearch.jsx","services/moviesApi.js"],"sourcesContent":["import { useState } from 'react';\nimport { PropTypes } from 'prop-types';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [movieName, setMovieName] = useState('');\n\n  const handleChange = event => {\n    setMovieName(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (movieName.trim() === '') {\n      alert('Your search is empty');\n    }\n    onSubmit(movieName);\n    setMovieName('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter the title of the film\"\n          value={movieName}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { fetchMovieByName } from 'services/moviesApi';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport SearchForm from 'components/SearchForm/SearchForm';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const currentItem = searchParams.get('query');\n\n  async function searchMovie(movieName) {\n    if (!movieName) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const movies = await fetchMovieByName(movieName);\n      if (movies.length === 0) {\n        alert('Movie not found');\n        return;\n      }\n      setMovies(movies);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const formSearchSubmit = movieName => {\n    setSearchParams({ query: movieName });\n    searchMovie(movieName);\n  };\n\n  useEffect(() => {\n    if (currentItem) {\n      searchMovie(currentItem);\n    }\n  }, [currentItem]);\n\n  return (\n    <div>\n      <SearchForm onSubmit={formSearchSubmit} />\n      {loading && <Loader />}\n      {movies && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst KEY = 'f954d1f327dcbc2e185dbd566025454c';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/all/day?api_key=${KEY}`);\n  const trendingMovies = await response.data.results;\n  return trendingMovies;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n\n  const movieDetails = await response.data;\n  return movieDetails;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  const movieCredits = await response.data;\n  return movieCredits;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}`);\n  const movieReviews = await response.data;\n  return movieReviews;\n};\n\nexport const fetchMovieByName = async (movieName, page) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&page=${page}&language=en&query=${movieName}`\n  );\n  const searchMoviesData = await response.data.results;\n  return searchMoviesData;\n};\n"],"names":["onSubmit","useState","movieName","setMovieName","event","preventDefault","trim","alert","type","name","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","movies","setMovies","loading","setLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","currentItem","get","searchMovie","fetchMovieByName","length","console","log","useEffect","query","Loader","map","movie","to","id","state","from","title","KEY","axios","getTrendingMovies","response","data","results","trendingMovies","getMovieDetails","movieDetails","getMovieCredits","movieId","movieCredits","getMovieReviews","movieReviews","page","searchMoviesData"],"sourceRoot":""}